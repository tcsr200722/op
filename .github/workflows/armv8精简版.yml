name: armv8精简版

on:
  repository_dispatch:
    types: [jarmv8,sshjarmv8]
  workflow_dispatch:
    inputs:
      ssh:
        description: 'jarmv8'
        required: false
        default: 'false'
  schedule:
    - cron: 00 16 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: jarmv8.config
  DIY1_SH: diy1.sh
  DIY2_SH: diy2.sh
  FEEDS_CONF: feeds
  UPLOAD_BIN_DIR: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: jarmv8

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    #- name: TG notification #TG推送
    #  run: curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=${{ env.FILE_NAME }}开始编译"     
    - name: WeChat notification #pushbot推送
      run: curl -H "Content-Type:application/json" -X POST -d '{"token":"${{ secrets.pushbot }}","title":"Actions云编译","content":"${{ env.FILE_NAME }}开始编译","template":"json"}' http://www.pushplus.plus/send

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    - name: Clone source code # 克隆源代码
      id: source
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY1_SH
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY2_SH
        sed -i 's/OpenWrt/Bin AutoBuild ${{ env.DATE1 }} @ OpenWrt/g' package/lean/default-settings/files/zzz-default-settings
        sed -i 's/IMG_PREFIX:=k$(LINUX_VERSION)-/IMG_PREFIX:=/g' include/image.mk
        sed -i "s|https.*/OpenWrt|https://github.com/binge8/op|g" package/openwrt-packages/luci-app-amlogic/root/etc/config/amlogic
        sed -i "s|ARMv8|jarmv8|g" package/openwrt-packages/luci-app-amlogic/root/etc/config/amlogic
        sed -i "s|opt/kernel|https://github.com/breakings/OpenWrt/kernel|g" package/openwrt-packages/luci-app-amlogic/root/etc/config/amlogic
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'sshjarmv8')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc) + 1)) thread compile"
        make -j$(($(nproc) + 1)) || make -j1 V=s
        echo "::set-output name=status::success"
        
    - name: Check space usage
      if: (!cancelled())
      run: df -hT
      
    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/* 
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: jarmv8
        path: ${{ env.FIRMWARE }}
      
    - name: Create release #上传编译固件
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.DATE }} 🚀 armv8(全系)精简版 | 自动编译
        allowUpdates: true
        tag: jarmv8
        commit: master
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          ${{ env.useVersionInfo }}
        artifacts: ${{ env.FIRMWARE }}/*.tar.gz,${{ env.FIRMWARE }}/config.buildinfo

    - name: 打包镜像
      uses: unifreq/openwrt_packit@master
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz
        KERNEL_VERSION_NAME: 5.10.90_5.16.2

    - name: Create release #上传打包固件
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
      with:
        name: ${{ env.DATE }} 🚀 armv8(全系)精简版 | 自动编译
        allowUpdates: true
        tag: jarmv8
        commit: master
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          ${{ env.useVersionInfo }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*

    - name: WeChat notification #pushbot推送
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: curl -H "Content-Type:application/json" -X POST -d '{"token":"${{ secrets.pushbot }}","title":"Actions云编译","content":"${{ env.FILE_NAME }}发布成功-编译结束${{ env.time }}","template":"json"}' http://www.pushplus.plus/send
